[[events-api]]
== Events API

The following section contains information about:

* <<events-api-endpoint>>
* <<events-api-response>>
* <<events-api-errors>>
* <<events-api-schema-definition>>

Agents capture different types of information, known as events. These events are sent to a single endpoint which then sorts and processes the events. Events can be:

* Transactions
* Spans
* Errors
* Metricsets

You can learn more about events in the {apm-get-started-ref}/apm-data-model.html[APM Data Model] documentation. 

[[events-api-endpoint]]
[float]
=== Endpoint
Send an `HTTP POST` request to the APM Server `intake/v2/events` endpoint:

[source,bash]
------------------------------------------------------------
http(s)://{hostname}:{port}/intake/v2/events
------------------------------------------------------------

For <<rum, RUM>> send an `HTTP POST` request to the APM Server `intake/v2/rum/events` endpoint instead:

[source,bash]
------------------------------------------------------------
http(s)://{hostname}:{port}/intake/v2/rum/events
------------------------------------------------------------

[[events-api-response]]
[float]
=== Response

On success, the server will respond with a 202 Accepted status code.

[[events-api-errors]]
[float]
=== Errors

Events are processed one after the either. If an error is encountered while processing an event, the error encountered, as well as the document causing the error are added to an internal array. The server will wait to encounter up to five errors before sending a response to the agent. If there are multiple errors, the highest status code is returned. 

As an example, here's the error response for invalid JSON:

[source,json]
------------------------------------------------------------
{
    "accepted": 1,
    "errors": [
        {
            "document": "{ \"invalid-json\" }",
            "message": "data read error: invalid character '}' after object key"
        }
    ]
}
------------------------------------------------------------

Some errors, not relating to specific events, may be immediately returnable.
For example: Request limit reached, bad header, or internal queue full.
If at any point one of these errors is encountered,
it is added to the internal array and immediately returned. 

If you're developing an agent, these errors can be useful for debugging your agent while building it. 

// todo: check troubleshooting section
The queue is full error is interesting, and can indicate that you probably want to reduce your sampling rate, get a bigger APM Server or elasticsearch - depending on where your bottlenecks are.

// todo: what errors are unrecoverable?
NOTE: If the APM Server runs into certain errors, it may not consume the whole body from the agent. The server just stops reading if the error is unrecoverable. Agents should be able to handle these situations

[[events-api-schema-definition]]
[float]
=== Event Schema

The APM Server uses a JSON Schema for validating requests:

* <<metadata-api,Metadata>>
* <<transaction-api,Transactions and Spans>>
* <<error-api,Errors>>
* <<metricset-api,Metricsets>>

include::./metadata-api.asciidoc[]
include::./transaction-api.asciidoc[]
include::./error-api.asciidoc[]
include::./metricset-api.asciidoc[]